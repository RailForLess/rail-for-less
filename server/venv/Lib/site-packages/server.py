from flask import Flask
from flask_socketio import SocketIO, send
import sqlite3
import json

from seleniumwire import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys

import pickle
import time
import random
import math

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins='*')


@app.route("/stations")
def stations():
    conn = sqlite3.connect("./server/venv/lib/site-packages/stations.db")
    c = conn.cursor()
    c.execute("SELECT name, state from stations")
    rows = c.fetchall()
    stations = list(map(lambda row: row[0], rows))
    station_info = list()
    for row in rows:
        data = ""
        data = row[0]
        if (stations.count(row[0]) > 1):
            data += f' ({row[1]})'
        station_info.append(data)
    conn.close()
    return {"stations": station_info}


@app.route("/status")
def status():
    with open("status.pk", "rb") as pk:
        return {"status": pickle.load(pk)}


@socketio.on("message")
def fares(request):
    def get_station_code(station):
        query = f"SELECT code from stations WHERE name = '{station.split(' (')[0]}'"
        if (len(station.split(' (')) == 2):
            query += f" AND state = '{station.split('(')[1].split(')')[0]}'"
        c.execute(query)
        return c.fetchall()[0][0]

    def send_progress(i, numDates, info):
        progress = dict()

        progress["percentComplete"] = round(
            round((i if len(info.split()) == 6 else i + 1) / numDates, 2) * 100)
        progress["info"] = info
        progress["date"] = f'Fetching date {i + 1} of {numDates}'

        send(json.dumps({"progress": progress}))

    with open("status.pk", "wb") as pk:
        pickle.dump(False, pk)

    args = json.loads(request)
    dept_station, arrival_station = args["deptStation"], args["arrivalStation"]
    dates = args["dates"]

    conn = sqlite3.connect("./server/venv/lib/site-packages/stations.db")
    c = conn.cursor()
    dept_code, arrival_code = get_station_code(
        dept_station), get_station_code(arrival_station)
    conn.close()

    coach, business, first = args["coach"], args["business"], args["first"]
    roomette, bedroom, family_bedroom = args["roomette"], args["bedroom"], args["familyBedroom"]

    def delay():
        time.sleep(random.randint(10, 20) / 100)

    def getProxy():
        with open("proxy.pk", "rb") as pk:
            proxy = pickle.load(pk)
        old_proxy = proxy
        if (proxy == 249):
            proxy = 200
        else:
            proxy += 1
        with open("proxy.pk", "wb") as pk:
            pickle.dump(proxy, pk)
        print(old_proxy)
        return old_proxy

    noTrains = False
    fares = list()

    try:
        i = 0
        while (i < len(dates)):
            date = dates[i]
            if (i % 3 == 0):
                send_progress(i, len(
                    dates), f"Connecting to proxy {math.ceil((i + 1) / 3)} of {math.ceil(len(dates) / 3)}")

                if (i != 0):
                    driver.quit()

                seleniumwire_options = {
                    "proxy": {
                        "http": "http://user:pass@host" + str(getProxy())
                    }
                }

                service = Service(
                    r"./server/venv/lib/site-packages/chromedriver.exe")
                options = webdriver.ChromeOptions()
                options.add_argument('ignore-certificate-errors')
                options.add_argument(
                    '--disable-blink-features=AutomationControlled')
                options.add_experimental_option(
                    'useAutomationExtension', False)
                options.add_experimental_option(
                    "excludeSwitches", ["enable-automation"])

                driver = webdriver.Chrome(
                    options=options, seleniumwire_options=seleniumwire_options, service=service)
                driver.set_page_load_timeout(15)
                try:
                    driver.get("https://www.amtrak.com/")
                except:
                    pass
                driver.set_page_load_timeout(10)

            send_progress(i, len(dates), "Inputting travel information")

            if not (i % 3 == 0 or noTrains):
                new_search_button = driver.find_element(
                    By.XPATH, "//button[contains(.,'New Search')]")
                ActionChains(driver).move_to_element(
                    new_search_button).perform()
                delay()
                new_search_button.click()
                delay()

            if (i % 3 == 0):
                dept_station_input = driver.find_element(
                    By.XPATH, "//input[@data-placeholder='From']")
                ActionChains(driver).move_to_element(
                    dept_station_input).perform()
                delay()
                dept_station_input.click()
                delay()
                dept_station_input.send_keys(dept_code)
                delay()
                arrival_station_input = driver.find_element(
                    By.XPATH, "//input[@data-placeholder='To']")
                ActionChains(driver).move_to_element(
                    arrival_station_input).perform()
                delay()
                arrival_station_input.click()
                delay()
                arrival_station_input.send_keys(arrival_code)
                delay()

            dept_date_input = WebDriverWait(driver, 30).until(EC.element_to_be_clickable((By.XPATH,
                                                                                          "//input[@data-julie='departdisplay_booking_oneway']")))
            ActionChains(driver).move_to_element(dept_date_input).perform()
            delay()
            dept_date_input.click()
            delay()
            dept_date_input.clear()
            delay()
            dept_date_input.send_keys(date)
            delay()

            done_button = driver.find_element(
                By.XPATH, "//button[contains(.,'Done')]")
            ActionChains(driver).move_to_element(done_button).perform()
            delay()
            done_button.click()
            delay()

            noTrains = False

            find_trains_button = driver.find_element(
                By.XPATH, "(//button[@data-julie='findtrains'])[1]")
            ActionChains(driver).move_to_element(find_trains_button).perform()
            delay()
            find_trains_button.click()

            send_progress(i, len(dates), "Waiting on amtrak.com")

            WebDriverWait(driver, 30).until(
                EC.any_of(EC.element_to_be_clickable((By.XPATH, "//button[contains(.,'New Search')]")),
                          EC.element_to_be_clickable(
                    (By.XPATH, "//button[contains(.,'Cancel')]")),
                    EC.presence_of_element_located((By.XPATH, "//div[@class='col-12 d-inline-flex']"))))
            if driver.find_elements(By.XPATH, "//button[contains(.,'Cancel')]") or \
                    driver.find_elements(By.XPATH, "//div[@class='col-12 d-inline-flex']"):
                if driver.find_elements(By.XPATH, "//button[contains(.,'Cancel')]"):
                    cancel_button = driver.find_element(
                        By.XPATH, "//button[contains(.,'Cancel')]")
                    ActionChains(driver).move_to_element(
                        cancel_button).perform()
                    delay()
                    cancel_button.click()
                    delay()
                noTrains = True

            if (not noTrains):
                fare = dict()

                route = driver.find_elements(
                    By.XPATH, "//a[@class='handpointer']")
                if (route):
                    route = route[0].text
                else:
                    route = "Multiple Trains"
                fare["route"] = route

                fare["date"] = date

                service = driver.find_element(
                    By.XPATH, "(//div[contains(@class,'service d-flex flex-grow-1')])[1]")

                if (coach):
                    coach_button = service.find_elements(
                        By.XPATH, ".//button[contains(.,'Coach')]")
                    if (coach_button):
                        fare["coach"] = coach_button[0].text.split()[2]

                if (business):
                    business_button = service.find_elements(
                        By.XPATH, ".//button[contains(.,'Business')]")
                    if (business_button):
                        fare["business"] = business_button[0].text.split()[2]

                if (first):
                    first_button = service.find_elements(
                        By.XPATH, ".//button[contains(.,'First')]")
                    if (first_button):
                        fare["first"] = first_button[0].text.split()[2]

                rooms_button = service.find_elements(
                    By.XPATH, ".//button[contains(.,'Rooms')]")
                if (rooms_button):
                    rooms_button = rooms_button[0]
                    if (roomette or bedroom or family_bedroom):
                        send_progress(
                            i, len(dates), "Browsing available rooms")
                        rooms_price = rooms_button.text.split()[2]
                        ActionChains(driver).move_to_element(
                            rooms_button).perform()
                        delay()
                        rooms_button.click()
                        delay()
                        bedroom_button = driver.find_elements(
                            By.XPATH, "//button[@aria-label='Bedroom']")
                        family_bedroom_button = driver.find_elements(
                            By.XPATH, "//button[@aria-label='Family Bedroom']")
                        if (bedroom_button):
                            bedroom_button = bedroom_button[0]
                        if (family_bedroom_button):
                            family_bedroom_button = family_bedroom_button[0]
                        if (not (bedroom_button or family_bedroom_button)):
                            search_results = driver.find_element(
                                By.XPATH, "//div[@class='search-results-leg-travel-class-content']")
                            room_type = search_results.find_element(
                                By.XPATH, "(//span[@class='font-light ng-tns-c154-13'])[2]").text
                            if (room_type == "Roomette" and roomette):
                                fare["roomette"] = rooms_price
                            elif (room_type == "Bedroom" and bedroom):
                                fare["bedroom"] = rooms_price
                            elif (room_type == "Family Bedroom" and family_bedroom):
                                fare["familyBedroom"] = rooms_price
                        if (roomette and not ("bedroom" in fare or "familyBedroom" in fare)):
                            fare["roomette"] = rooms_price
                        if (bedroom and bedroom_button):
                            ActionChains(driver).move_to_element(
                                bedroom_button).perform()
                            delay()
                            bedroom_button.click()

                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable(
                                (By.XPATH, "//button[contains(.,'Add to Cart')]")))
                            accomodation_pill = driver.find_elements(
                                By.XPATH, "//accomodation-pill")[1]
                            bedroom_price = accomodation_pill.find_elements(
                                By.XPATH, ".//span[@class='price-currency']")
                            if (bedroom_price):
                                bedroom_price = bedroom_price[0].text
                            else:
                                bedroom_price = rooms_price
                            fare["bedroom"] = bedroom_price
                        if (family_bedroom and family_bedroom_button):
                            ActionChains(driver).move_to_element(
                                family_bedroom_button).perform()
                            delay()
                            family_bedroom_button.click()
                            WebDriverWait(driver, 5).until(EC.element_to_be_clickable(
                                (By.XPATH, "//button[contains(.,'Add to Cart')]")))
                            accomodation_pill = driver.find_elements(
                                By.XPATH, "//accomodation-pill")[1]
                            family_bedroom_price = accomodation_pill.find_elements(
                                By.XPATH, ".//span[@class='price-currency']")
                            if (family_bedroom_price):
                                family_bedroom_price = family_bedroom_price[0].text
                            else:
                                family_bedroom_price = rooms_price
                            fare["familyBedroom"] = family_bedroom_price
                        rooms_button.click()
                        delay()
                        html = driver.find_element(By.TAG_NAME, "html")
                        html.send_keys(Keys.HOME)
                        delay()

                details = driver.find_element(
                    By.XPATH, "(//div[contains(@class,'details d-flex flex-grow-1')])[1]")
                capacity = details.find_element(
                    By.XPATH, ".//div[@class='seat-capacity-text']").text
                if (capacity):
                    fare["capacity"] = capacity.split(
                    )[0][capacity.index("%") - 2:capacity.index("%") + 1]

                depart_time = details.find_element(
                    By.XPATH, "(.//span[@class='font-light'])[1]").text
                depart_period = details.find_element(
                    By.XPATH, "(.//span[@class='time-period'])[1]").text
                fare["departs"] = depart_time + depart_period

                fare["duration"] = driver.find_element(
                    By.XPATH, "(//span[@amt-auto-test-id='journey-duration'])[1]").text

                arrival_time = details.find_element(
                    By.XPATH, "(.//span[@class='font-light'])[2]").text
                arrival_period = details.find_element(
                    By.XPATH, "(.//span[@class='time-period'])[2]").text
                fare["arrives"] = arrival_time + arrival_period

                fares.append(fare)

            if (i == len(dates) - 1):
                send_progress(i, len(dates), "Finishing up")

                driver.close()
                break
            else:
                i += 1
    except:
        send_progress(i, len(dates), "ERROR")

    with open("status.pk", "wb") as pk:
        pickle.dump(True, pk)
    send(json.dumps({"fares": fares}))


app.run()
socketio.run(app)
